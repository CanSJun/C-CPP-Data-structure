#include <iostream>

using namespace std;

/*
ㅇ그래프
-객체 간의 연결 관계를 표현할 수 있는 비선형 자료구조이다.

ㅇ그래프의 구성 요소
G = (V,E)

ㅁ정점(vertex, node) V 
-그래프를 구성하는 기본 단위, 노드라고 하는 이름을 사용하기도 한다
-자료를 값을 저장하거나, 상태를 표현할 수 있다.

ㅁ에지(edge, link) E
-정점과 정점을 잇는 선, 간선이라고도 표현한다
-방향을 가질 수 있다.
-가중치(weight)를 가질 수 있다.

ㅇ그래프 용어
-가중치(weight) : edge에 부여된 수치, 비용(cost)라기도 한다.
-인접 정점(adjacent vertex) : 특정정점에서 edge로 연결되어 있는 정점 
-차수(degree) : 정점에 연결된 다른 정점의 개수
-경로(path) : 특정 정점에서 다른 정점으로 이동하는 방법을 인접 정점의 나열로 표현한 것

경로 중 특정정점이 중복되지 않은 경로를 단순 경로(simple path)라고도 한다.

-사이클(cycle) : 시작 정점과 마지막 정점이 같은 단순 경로(simple path)
참고로 트리 구조도 사이클이 없는 그래프를 트리로 정의 할 수 있다.

-방향 그래프(directed graph) : edge에 방향이 있는 그래프. 유행 그래프, 네트워크라고도 한다
							  방향 그래프에서 에지(u,v)는 정점 u에서 정점 v로 이동하는 edge를 나타낸다 (u, v) != (v,u)

-가중치 그래프(weighted graph) : edge에 가중치가 부여된 그래프 ( 무방향, 방향 다 가능)

-서브 그래프(subgraph) : 주어진 그래프에서 정점과 간선 일부를 제외하여 만든 그래프, 부분그래프라고도 한다.

ㅇ그래프 표현방법
-인접행렬(adjacency matrix) 
  정점 개수가 N인 경우 N*N 크기의 2차원 행렬로 정점의 인접 관계를 표현하는 방법
  adj[u][v] : 노드 u 에서 노드 v로 가는 간선이 있으면 1, 없으면 0
  그래프 정점 개수가 적고, edge가 많을때 유리. 공간 복잡도는 O(N^2)

  ex) 0-------1     0  1  2   3  
      l \        0  0  1  1   1
 	  2------3   1  1  0  0   0
                 2  1  0  0   1
                 3  1  0  1   0
    방향이 있으면?

      0<--------1     0  1  2  3
      l \         0   0  0  1  1 
      v  \->      1   1  0  0  0
      2<--------3 2   0  0  0  0 
                  3   0  0  1  0

ㅇ인접리스트(adjacency list)
-각 정점에 인접한 정점들을 연결리스트로 표현
-보통 정점 개수에 해당하는 배열의 각 원소에 연결 리스트가 속해 있는 형태로 표현
-공간 복잡도는 O(N+M ( N : 정점 개수 , M : 에지 개수)
  ex) 0-------1     
      l \        0  ->1 | -> 2 | -> 3 | -
      2------3   1  ->0 | -
                 2  ->0 | -> 3 | -
                 3  ->0 | -> 2 | -
                 무방향에서는 노드의 개수가 2M개 존재 
                     방향이 있으면?

      0<--------1   
      l \         0 -> 2|->3|-
      v  \->      1 -> 0 | -
      2<--------3 2 -
                  3 -> 2|-
                  방향에선 M개의 노드가 존재


 ㅇ에지 리스트(edge list)
 -모든 에지(u,v)를 리스트를 또는 배열로 표현
 -공간 복잡도는 O(M) ( M : 에지 개수)



 //정점 기준으로 들어오는걸 indegree라고하고 나가는걸 outdegree라고 한다.
*/
#include <vector>

vector<vector<int>> adj_matrix = { //인접행렬 표현 법
    { 0, 1, 0, 1 ,1, 0},
    { 1 ,0 ,1, 0 ,1, 0},
    { 0, 1, 0, 0 ,0, 1}
};

vector<vector<int>> adj_list = { //인접 리스트 형태
    { 1,3,4},
    { 0,2,4},
    { 1,5}
};

vector<vector<int>> edge_list = { // 에지 리스트
    { 0, 1} , { 0, 3}, { 0, 4}, // 0번과 1번을 잇는 간선, 0번과 3번을 잇는 간선, 0번과 4번을 잇는 간선
    {1, 0}, {1, 2}, {1, 4} // 1번과 0번을 잇는 간선
};


/*
ㅇ그래프 순회(graph traversal)
-하나의 정점에서 시작하여 몯느 정점들을 한번씩 방문하는 작업이다.
-많은 문제들이 그래프 순회를 이용하여 해결 될 수 있다.

ㅇ순회 방법
1. 깊이 우선 탐색 ( DFS : Depth First Search )
- 현재 정점과, 인접한 정점 중 하나를 선택하여 이동하는 과정을 반복하고, 더 이상 이동할 정점이 없을 경우 뒤쪽으로 backtracking 하여 다시 이동할 경로를 탐색한다.
-시작 정점으로부터 거리가 멀어지는 방식으로 정점을 탐색한다
-보통 재귀 또는 스택을 이용하여 구현한다.

2. 너비 우선 탐색 ( BFS : Breadth First Search )
-현재 정점과 인접한 모든 정점을 방문한 후, 다시 이들 정점과 인접한 모든 정점을 찾아 방문하는 방식
-시작 정점으로부터 가까운 정점을 방문하고, 멀리 떨어져 있는 정점을 나중에 방문한다
-보통 큐를 이용하여 구현한다


// 최소 신장트리 또는 최단경로 탐색은 다른 책과 자료를 참고 하세요!
*/